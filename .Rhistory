clean_names()
train <- train %>%
mutate(month = month(created),
day = wday(created),
year = year(created),
hour = hour(created),
num_people = str_count(description, "@"),
num_hash = str_count(description, "#"))
train <- read.csv("data/training_set_extended_2.csv") %>%
clean_names()
View(train)
View(train)
system("python nba_creation_date.py")
system("python nba_creation_date.py")
system("python nba_creation_date.py")
system("python nba_creation_date.py")
system("python nba_creation_date.py")
system("python nba_creation_date.py")
system("python nba_creation_date.py")
training <- read_xls("data/training_set_extended.xls")
library(tidyverse)
library(lubridate)
library(readxl)
training <- read_xls("data/training_set_extended.xls")
train <- read_xls("training_set_extended_2.xls")
train <- read_csv("training_set_extended_2.csv")
train <- read_csv("holdout_extended_2.csv")
View(train)
train <- read_csv("training_set_extended_5.csv")
View(train)
train <- read_csv("data/training_set_extended_2.xls")
train <- read_csv("data/training_set_extended.xls")
train <- read_csv("data/training_set_extended.xls")
train <- read_xls("data/training_set_extended.xls")
View(train)
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
## Create useful functions for calculating mape
Calc_Mape <- function(labels, dataset, model)
{
actual = labels
predicted = predict(model, dataset)
APE = abs((actual - predicted)/actual) * 100
mape = mean(APE)
return(mape)
}
Calc_Predicted <- function(model, dataset)
{
predicted = predict(model, dataset)
return(predicted)
}
Calc_PE <- function(labels, dataset, model)
{
actual = labels
predicted = predict(model, dataset)
PE = ((actual - predicted)/actual) * 100
return (PE)
}
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(readr)
library(stringr)
library(car)
install.packages("car")
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(tidyverse)
library(ggplot2)
library(randomForest)
# Read in data
df <- read.csv("~/Desktop/NBA_Analytics/nba-business-hackathon/data/training_set_extended_5.csv")
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(tidyverse)
library(ggplot2)
library(randomForest)
# Read in data
df <- read.csv("training_set_extended_5.csv")
install.packages("xgboost")
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(tidyverse)
library(ggplot2)
library(randomForest)
# Read in data
df <- read.csv("training_set_extended_5.csv")
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(tidyverse)
library(ggplot2)
library(randomForest)
# Read in data
df <- read.csv("training_set_extended_5.csv")
## Deleting missing data
# Order data by post description
df <- df[order(df$Description),]
# Delete
df <- df[-c(1:14), ]
df <- df[-c(6:21), ]
## Create variables for number of people and number of hashtags
## mentioned, turn weekdays and post type into numbers, and clean is_season variable.
nba <- df %>%
mutate(num_ats = str_count(Description, "@"),
num_hash = str_count(Description, "#"))
for(i in 1:length(nba[,1])){
if(is.na(nba$season_yr[i]))(nba$season_yr[i] = 0)
}
nba$Type_num <- NA
for(i in 1:length(nba[,1])){
if(nba$Type[i] == "Video")(nba$Type_num[i] = 1)
if(nba$Type[i] == "Photo")(nba$Type_num[i] = 2)
if(nba$Type[i] == "Album")(nba$Type_num[i] = 3)
}
nba$wkdy_num <- NA
for(i in 1:length(nba[,1])){
if(nba$weekday[i] == "Sunday")(nba$wkdy_num[i] = 1)
if(nba$weekday[i] == "Monday")(nba$wkdy_num[i] = 2)
if(nba$weekday[i] == "Tuesday")(nba$wkdy_num[i] = 3)
if(nba$weekday[i] == "Wednesday")(nba$wkdy_num[i] = 4)
if(nba$weekday[i] == "Thursday")(nba$wkdy_num[i] = 5)
if(nba$weekday[i] == "Friday")(nba$wkdy_num[i] = 6)
if(nba$weekday[i] == "Saturday")(nba$wkdy_num[i] = 7)
}
nba$day_time_num <- NA
for(i in 1:length(nba[,1])){
if(nba$day_time[i] == "deadzone")(nba$day_time_num[i] = 1)
if(nba$day_time[i] == "morning")(nba$day_time_num[i] = 2)
if(nba$day_time[i] == "lunch")(nba$day_time_num[i] = 3)
if(nba$day_time[i] == "afternoon")(nba$day_time_num[i] = 4)
if(nba$day_time[i] == "evening")(nba$day_time_num[i] = 5)
if(nba$day_time[i] == "night")(nba$day_time_num[i] = 6)
if(nba$day_time[i] == "postgame")(nba$day_time_num[i] = 7)
}
## Create variables for number of people and number of hashtags
## mentioned, turn weekdays and post type into numbers, and clean is_season variable.
nba <- df %>%
mutate(num_ats = str_count(Description, "@"),
num_hash = str_count(Description, "#"))
for(i in 1:length(nba[,1])){
if(is.na(nba$season_yr[i]))(nba$season_yr[i] = 0)
}
nba$Type_num <- NA
for(i in 1:length(nba[,1])){
if(nba$Type[i] == "Video")(nba$Type_num[i] = 1)
if(nba$Type[i] == "Photo")(nba$Type_num[i] = 2)
if(nba$Type[i] == "Album")(nba$Type_num[i] = 3)
}
nba$wkdy_num <- NA
for(i in 1:length(nba[,1])){
if(nba$weekday[i] == "Sunday")(nba$wkdy_num[i] = 1)
if(nba$weekday[i] == "Monday")(nba$wkdy_num[i] = 2)
if(nba$weekday[i] == "Tuesday")(nba$wkdy_num[i] = 3)
if(nba$weekday[i] == "Wednesday")(nba$wkdy_num[i] = 4)
if(nba$weekday[i] == "Thursday")(nba$wkdy_num[i] = 5)
if(nba$weekday[i] == "Friday")(nba$wkdy_num[i] = 6)
if(nba$weekday[i] == "Saturday")(nba$wkdy_num[i] = 7)
}
nba$day_time_num <- NA
for(i in 1:length(nba[,1])){
if(nba$day_time[i] == "deadzone")(nba$day_time_num[i] = 1)
if(nba$day_time[i] == "morning")(nba$day_time_num[i] = 2)
if(nba$day_time[i] == "lunch")(nba$day_time_num[i] = 3)
if(nba$day_time[i] == "afternoon")(nba$day_time_num[i] = 4)
if(nba$day_time[i] == "evening")(nba$day_time_num[i] = 5)
if(nba$day_time[i] == "night")(nba$day_time_num[i] = 6)
if(nba$day_time[i] == "postgame")(nba$day_time_num[i] = 7)
}
# Delete irrelevant indexing columns.
nba <- nba[,-c(1,2)]
nba_graphs <- nba
nba_graphs$is_playoffs = as.factor(nba$is_playoffs)
nba_graphs$all_nba = as.factor(nba$all_nba)
nba_graphs$league_type = as.factor(nba$league_type)
nba_graphs$is_season = as.factor(nba$is_season)
nba_graphs$season_yr = as.factor(nba$season_yr)
nba_graphs$same_day_post = as.factor(nba$same_day_post)
nba_graphs$num_ats = as.factor(nba$num_ats)
nba_graphs$num_hash = as.factor(nba$num_hash)
g <- ggplot(nba_graphs, aes(x = month, y = Engagements))
g + geom_boxplot(position = "dodge", fill = 'skyblue') + labs(title="Engagements by Month", x= "Month", y="Engagements") + scale_x_discrete(limits = c("October", "November", "December","January", "February","March", "April","May","June","July","August","September")) + theme_minimal()
g <- ggplot(nba_graphs, aes(x = weekday, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#C3D7A4") + labs(title="Engagements by Day", x= "Weekday", y="Engagements") + scale_x_discrete(limits = c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday","Sunday")) + theme_minimal()
g <- ggplot(nba_graphs, aes(x = day_time, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#52854C") + labs(title="Engagements by Time of Day", x= "day_time", y="Engagements") + scale_x_discrete(limits = c("deadzone", "morning", "lunch", "afternoon","evening", "night","postgame")) + theme_minimal()
g <- ggplot(nba_graphs, aes(x = season_yr, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#FFDB6D") + labs(title="Effect of Season Year on Engagements", x= "Season Year", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = is_season, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#FFDB6D") + labs(title="Effect of Being In Season on Engagements", x= "Season or Off-Season", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = is_playoffs, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#FFDB6D") + labs(title="Effect of Playoff Season on Engagements", x= "During Playoffs", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = all_nba, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#C4961A") + labs(title="Effect of Star Players on Engagements", x= "Type of Star Players", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = league_type, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#F4EDCA") + labs(title="Effect of NBA vs GLeague vs WNBA on Engagements", x= "Type of League", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = same_day_post, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#CC79A7") + labs(title="Effect of Posting in the Same Time Period", x= "Same Time Period", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = num_ats, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#CC79A7") + labs(title="Effect of @s", x= "Number of @s", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = num_hash, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#CC79A7") + labs(title="Effec of Hashtags (#)", x= "Number of #s", y="Engagements") + theme_minimal()
nba_graphs <- nba
nba_graphs$is_playoffs = as.factor(nba$is_playoffs)
nba_graphs$all_nba = as.factor(nba$all_nba)
nba_graphs$league_type = as.factor(nba$league_type)
nba_graphs$is_season = as.factor(nba$is_season)
nba_graphs$season_yr = as.factor(nba$season_yr)
nba_graphs$same_day_post = as.factor(nba$same_day_post)
nba_graphs$num_ats = as.factor(nba$num_ats)
nba_graphs$num_hash = as.factor(nba$num_hash)
g <- ggplot(nba_graphs, aes(x = month, y = Engagements))
g + geom_boxplot(position = "dodge", fill = 'skyblue') + labs(title="Engagements by Month", x= "Month", y="Engagements") + scale_x_discrete(limits = c("October", "November", "December","January", "February","March", "April","May","June","July","August","September")) + theme_minimal()
g <- ggplot(nba_graphs, aes(x = weekday, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#C3D7A4") + labs(title="Engagements by Day", x= "Weekday", y="Engagements") + scale_x_discrete(limits = c("Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday","Sunday")) + theme_minimal()
g <- ggplot(nba_graphs, aes(x = day_time, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#52854C") + labs(title="Engagements by Time of Day", x= "day_time", y="Engagements") + scale_x_discrete(limits = c("deadzone", "morning", "lunch", "afternoon","evening", "night","postgame")) + theme_minimal()
g <- ggplot(nba_graphs, aes(x = season_yr, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#FFDB6D") + labs(title="Effect of Season Year on Engagements", x= "Season Year", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = is_season, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#FFDB6D") + labs(title="Effect of Being In Season on Engagements", x= "Season or Off-Season", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = is_playoffs, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#FFDB6D") + labs(title="Effect of Playoff Season on Engagements", x= "During Playoffs", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = all_nba, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#C4961A") + labs(title="Effect of Star Players on Engagements", x= "Type of Star Players", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = league_type, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#F4EDCA") + labs(title="Effect of NBA vs GLeague vs WNBA on Engagements", x= "Type of League", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = same_day_post, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#CC79A7") + labs(title="Effect of Posting in the Same Time Period", x= "Same Time Period", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = num_ats, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#CC79A7") + labs(title="Effect of @s", x= "Number of @s", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = num_hash, y = Engagements))
g + geom_boxplot(position = "dodge", fill = "#CC79A7") + labs(title="Effect of Hashtags (#)", x= "Number of #s", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements") + theme_minimal()
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "January", "February", "March", "April", "May", ,"June","July","August","September"))
nba_graphs %>% View()
nba_graphs %>% summary()
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "January", "February", "March", "April", "May", ,"June","July","August","September", "October", "November", "December"))
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "January", "February", "March", "April", "May", ,"June","July","August","September", "October", "November", "December"))
rlang::last_error()
rlang::last_trace()
??factor_relevel
??fct_relevel
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "January", "February", "March", "April", ,"June","July","August","September", "October", "November", "December"))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements") + theme_minimal()
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "October", "November", "December","January", "February","March", "April","May","June","July","August","September"))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements") + theme_minimal()
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "October", "November", "December","January", "February","March", "April","May","June","July","August","September"))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements") + theme_minimal()
# reordering
nba_graphs <- nba_graphs %>%
mutate(month = fct_relevel(month, "October", "November", "December","January", "February","March", "April","May","June","July","August","September")) %>%
mutate(weekday = fct_relevel(weekday, "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday","Sunday")) %>%
mutate(day_time = fct_relevel(day_time, "deadzone", "morning", "lunch", "afternoon","evening", "night","postgame"))
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = weekday))
g + geom_boxplot(position = "dodge",outlier.shape=NA) + labs(title="Engagements by Day", x= "Weekday", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = day_time))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Time of Day", x= "day_time", y="Engagements") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements", fill="Month") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = weekday))
g + geom_boxplot(position = "dodge",outlier.shape=NA) + labs(title="Engagements by Day", x= "Weekday", y="Engagements", fill="Day of the Week") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = day_time))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Time of Day", x= "day_time", y="Engagements", fill="Time Period in the Day") + theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month", x= "Month", y="Engagements", fill="Month (Ordered by Start of Season)") + theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month (Ordered by Start of Season)", x= "Month", y="Engagements", fill="Month") + theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") + theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g + geom_boxplot(position = "dodge", outlier.shape=NA) + labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") + theme_minimal()
?scales
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(breaks=scales::pretty_breaks()) +
theme_minimal()
g <- ggplot(nba_graphs, aes(x = Type, y = Engagements, fill = month))
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(breaks=scales::pretty_breaks()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(breaks=scales:::pretty_breaks()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(breaks=scales::comma_format()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = comma_format()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = scales::comma_format()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_x_discrete(labels = scales::comma_format()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = scales::comma()) +
theme_minimal()
scale_y_discrete(labels = scales::comma +
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = scales::comma) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = scientific) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = scales::number_format()) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(labels = breaks=(0,2000,500)) +
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(breaks=(0,2000,500)) +
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
scale_y_discrete(breaks=seq(0,2000,500)) +
theme_minimal()
g + geom_boxplot(position = "dodge", outlier.shape=NA) +
labs(title="Engagements by Month (From Start of Season)", x= "Month", y="Engagements", fill="Month") +
theme_minimal()
View(nba)
## Models for training and prediction
vars = colnames(c(nba[2], nba[9], nba[11], nba[16], nba[18:20], nba[23:24]))
??colnames
## Models for training and prediction
test = cbind(nba[2], nba[9], nba[11], nba[16], nba[18:20], nba[23:24])
View(test)
## Models for training and prediction
nba_vars = cbind(nba[2], nba[9], nba[11], nba[16], nba[18:20], nba[23:24])
vars = colnames(nba_vars)
holdout$day_time_num <- NA
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
write_csv(holdout, "data/holdout_extended_final.csv")
View(holdout)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(holdout)
View(holdout)
View(holdout)
holdout$Type_num <- ifelse(holdout$Type == "Video", 1, ifelse(holdout$Type == "Photo", 2, 3))
View(holdout)
View(holdout)
summary(holdout)
summarize(holdout)
??dummy
?dummy.coef
?dummy
?dummies
??dummies
install.packages("dummy")
install.packages("dummies")
?dummy
?dummies
test <- holdout
test$day_time_num <- dummy::dummy(holdout$day_time, p="all")
test$day_time_num <- dummy::dummy(holdout$day_time)
test$day_time_num <- dummy::dummy(test$day_time)
test
holdout
View(holdout)
holdout %>%
remove(wkday_num, day_time_num)
holdout <- holdout %>%
remove(wkday_num, day_time_num)
View(test)
View(test)
holdout <- test
holdout <- holdout[1:25]
write_csv(holdout, "data/holdout_final.csv")
??fct_relevel
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(holdout)
holdout %>%
filter(is_season == TRUE) %>%
View()
holdout %>%
filter(is_season == TRUE) %>%
summary()
#Calculate APE and append to holdout dataframe
for (i in holdout)
{
if (holdout$Type_num[i] == 1)(holdout$Engagements[i] = Calc_Predicted(RF_Video_Final, holdout))
if (holdout$Type_num[i] == 2)(holdout$Engagements[i] = Calc_Predicted(RF_Photo_Final, holdout))
if (holdout$Type_num[i] == 3)(holdout$Engagements[i] = Calc_Predicted(RF_Album_Final, holdout))
}
## Create useful functions for calculating mape
Calc_Mape <- function(labels, dataset, model)
{
actual = labels
predicted = predict(model, dataset)
APE = abs((actual - predicted)/actual) * 100
mape = mean(APE)
return(mape)
}
Calc_Predicted <- function(model, dataset)
{
predicted = predict(model, dataset)
return(predicted)
}
Calc_PE <- function(labels, dataset, model)
{
actual = labels
predicted = predict(model, dataset)
PE = ((actual - predicted)/actual) * 100
return (PE)
}
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(readr)
library(stringr)
library(car)
library(dplyr)
library(ggplot2)
library(randomForest)
# Read in data
df <- read.csv("~/Desktop/NBA_Analytics/nba-business-hackathon/data/training_set_final.csv")
# Read in holdout set and make same modifications as training set
holdout <- read.csv("data/nba-business-hackathon/data/holdout_final.csv")
holdout <- read.csv("data/holdout_final.csv")
holdout_final.csv
holdout <- read_csv("data/holdout_final.csv")
holdout <- read_csv("data/holdout_final.csv")
# Calculating MAPE of training sets
RF_Video <- randomForest(Engagements ~ Followers+month+day_time+weekday+Followers_Mentioned+is_season+all_nba+league_type+num_ats+num_hash, ntree=1000, mtry=7,importance=TRUE, data=train_dataRF_Video)
# Read in data
df <- read.csv("data/training_set_final.csv")
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(readr)
library(stringr)
library(car)
library(dplyr)
library(ggplot2)
library(randomForest)
# Read in data
df <- read.csv("data/training_set_final.csv")
# Read in data
df <- read_csv("data/training_set_final.csv")
# Read in data
df <- read_csv("training_set_final.csv")
## Load necessary libraries and read data
require(caTools)
require(gam)
require(xgboost)
require(Matrix)
library(readr)
library(stringr)
library(car)
library(dplyr)
library(ggplot2)
library(randomForest)
# Read in data
df <- read_csv("training_set_extended_5.csv")
## Deleting missing data
# Order data by post description
df <- df[order(df$Description),]
# Delete descriptions with NAs, just symbols, or just emojis
# and remove season_yr and is_finals column
nba <- df[-c(1:14,20:35), -c(15,17)]
nba_graphs <- nba
nba_graphs$is_playoffs = as.factor(nba$is_playoffs)
nba_graphs$all_nba = as.factor(nba$all_nba)
nba_graphs$league_type = as.factor(nba$league_type)
nba_graphs$is_season = as.factor(nba$is_season)
nba_graphs <- nba
nba_graphs$is_playoffs = as.factor(nba$is_playoffs)
nba_graphs$all_nba = as.factor(nba$all_nba)
nba_graphs$league_type = as.factor(nba$league_type)
nba_graphs$is_season = as.factor(nba$is_season)
